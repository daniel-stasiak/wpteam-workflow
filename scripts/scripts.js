function _classCallCheck(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}function _classCallCheck(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}function _classCallCheck(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}function _classCallCheck(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}function _classCallCheck(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}function _classCallCheck(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}function _classCallCheck(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}function _classCallCheck(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}var _createClass=function(){function t(t,e){for(var n=0;n<e.length;n++){var i=e[n];i.enumerable=i.enumerable||!1,i.configurable=!0,"value"in i&&(i.writable=!0),Object.defineProperty(t,i.key,i)}}return function(e,n,i){return n&&t(e.prototype,n),i&&t(e,i),e}}(),Button=function(t){var e="button",n="4.0.0-alpha.6",i="bs.button",o="."+i,r=".data-api",s=t.fn[e],a={ACTIVE:"active",BUTTON:"btn",FOCUS:"focus"},l={DATA_TOGGLE_CARROT:'[data-toggle^="button"]',DATA_TOGGLE:'[data-toggle="buttons"]',INPUT:"input",ACTIVE:".active",BUTTON:".btn"},c={CLICK_DATA_API:"click"+o+r,FOCUS_BLUR_DATA_API:"focus"+o+r+" "+("blur"+o+r)},u=function(){function e(t){_classCallCheck(this,e),this._element=t}return e.prototype.toggle=function(){var e=!0,n=t(this._element).closest(l.DATA_TOGGLE)[0];if(n){var i=t(this._element).find(l.INPUT)[0];if(i){if("radio"===i.type)if(i.checked&&t(this._element).hasClass(a.ACTIVE))e=!1;else{var o=t(n).find(l.ACTIVE)[0];o&&t(o).removeClass(a.ACTIVE)}e&&(i.checked=!t(this._element).hasClass(a.ACTIVE),t(i).trigger("change")),i.focus()}}this._element.setAttribute("aria-pressed",!t(this._element).hasClass(a.ACTIVE)),e&&t(this._element).toggleClass(a.ACTIVE)},e.prototype.dispose=function(){t.removeData(this._element,i),this._element=null},e._jQueryInterface=function(n){return this.each(function(){var o=t(this).data(i);o||(o=new e(this),t(this).data(i,o)),"toggle"===n&&o[n]()})},_createClass(e,null,[{key:"VERSION",get:function(){return n}}]),e}();return t(document).on(c.CLICK_DATA_API,l.DATA_TOGGLE_CARROT,function(e){e.preventDefault();var n=e.target;t(n).hasClass(a.BUTTON)||(n=t(n).closest(l.BUTTON)),u._jQueryInterface.call(t(n),"toggle")}).on(c.FOCUS_BLUR_DATA_API,l.DATA_TOGGLE_CARROT,function(e){var n=t(e.target).closest(l.BUTTON)[0];t(n).toggleClass(a.FOCUS,/^focus(in)?$/.test(e.type))}),t.fn[e]=u._jQueryInterface,t.fn[e].Constructor=u,t.fn[e].noConflict=function(){return t.fn[e]=s,u._jQueryInterface},u}(jQuery),_typeof="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t},_createClass=function(){function t(t,e){for(var n=0;n<e.length;n++){var i=e[n];i.enumerable=i.enumerable||!1,i.configurable=!0,"value"in i&&(i.writable=!0),Object.defineProperty(t,i.key,i)}}return function(e,n,i){return n&&t(e.prototype,n),i&&t(e,i),e}}(),Carousel=function(t){var e="carousel",n="4.0.0-alpha.6",i="bs.carousel",o="."+i,r=".data-api",s=t.fn[e],a=600,l=37,c=39,u={interval:5e3,keyboard:!0,slide:!1,pause:"hover",wrap:!0},h={interval:"(number|boolean)",keyboard:"boolean",slide:"(boolean|string)",pause:"(string|boolean)",wrap:"boolean"},d={NEXT:"next",PREV:"prev",LEFT:"left",RIGHT:"right"},f={SLIDE:"slide"+o,SLID:"slid"+o,KEYDOWN:"keydown"+o,MOUSEENTER:"mouseenter"+o,MOUSELEAVE:"mouseleave"+o,LOAD_DATA_API:"load"+o+r,CLICK_DATA_API:"click"+o+r},p={CAROUSEL:"carousel",ACTIVE:"active",SLIDE:"slide",RIGHT:"carousel-item-right",LEFT:"carousel-item-left",NEXT:"carousel-item-next",PREV:"carousel-item-prev",ITEM:"carousel-item"},_={ACTIVE:".active",ACTIVE_ITEM:".active.carousel-item",ITEM:".carousel-item",NEXT_PREV:".carousel-item-next, .carousel-item-prev",INDICATORS:".carousel-indicators",DATA_SLIDE:"[data-slide], [data-slide-to]",DATA_RIDE:'[data-ride="carousel"]'},g=function(){function r(e,n){_classCallCheck(this,r),this._items=null,this._interval=null,this._activeElement=null,this._isPaused=!1,this._isSliding=!1,this._config=this._getConfig(n),this._element=t(e)[0],this._indicatorsElement=t(this._element).find(_.INDICATORS)[0],this._addEventListeners()}return r.prototype.next=function(){if(this._isSliding)throw new Error("Carousel is sliding");this._slide(d.NEXT)},r.prototype.nextWhenVisible=function(){document.hidden||this.next()},r.prototype.prev=function(){if(this._isSliding)throw new Error("Carousel is sliding");this._slide(d.PREVIOUS)},r.prototype.pause=function(e){e||(this._isPaused=!0),t(this._element).find(_.NEXT_PREV)[0]&&Util.supportsTransitionEnd()&&(Util.triggerTransitionEnd(this._element),this.cycle(!0)),clearInterval(this._interval),this._interval=null},r.prototype.cycle=function(t){t||(this._isPaused=!1),this._interval&&(clearInterval(this._interval),this._interval=null),this._config.interval&&!this._isPaused&&(this._interval=setInterval((document.visibilityState?this.nextWhenVisible:this.next).bind(this),this._config.interval))},r.prototype.to=function(e){var n=this;this._activeElement=t(this._element).find(_.ACTIVE_ITEM)[0];var i=this._getItemIndex(this._activeElement);if(!(e>this._items.length-1||e<0)){if(this._isSliding)return void t(this._element).one(f.SLID,function(){return n.to(e)});if(i===e)return this.pause(),void this.cycle();var o=e>i?d.NEXT:d.PREVIOUS;this._slide(o,this._items[e])}},r.prototype.dispose=function(){t(this._element).off(o),t.removeData(this._element,i),this._items=null,this._config=null,this._element=null,this._interval=null,this._isPaused=null,this._isSliding=null,this._activeElement=null,this._indicatorsElement=null},r.prototype._getConfig=function(n){return n=t.extend({},u,n),Util.typeCheckConfig(e,n,h),n},r.prototype._addEventListeners=function(){var e=this;this._config.keyboard&&t(this._element).on(f.KEYDOWN,function(t){return e._keydown(t)}),"hover"!==this._config.pause||"ontouchstart"in document.documentElement||t(this._element).on(f.MOUSEENTER,function(t){return e.pause(t)}).on(f.MOUSELEAVE,function(t){return e.cycle(t)})},r.prototype._keydown=function(t){if(!/input|textarea/i.test(t.target.tagName))switch(t.which){case l:t.preventDefault(),this.prev();break;case c:t.preventDefault(),this.next();break;default:return}},r.prototype._getItemIndex=function(e){return this._items=t.makeArray(t(e).parent().find(_.ITEM)),this._items.indexOf(e)},r.prototype._getItemByDirection=function(t,e){var n=t===d.NEXT,i=t===d.PREVIOUS,o=this._getItemIndex(e),r=this._items.length-1,s=i&&0===o||n&&o===r;if(s&&!this._config.wrap)return e;var a=t===d.PREVIOUS?-1:1,l=(o+a)%this._items.length;return l===-1?this._items[this._items.length-1]:this._items[l]},r.prototype._triggerSlideEvent=function(e,n){var i=t.Event(f.SLIDE,{relatedTarget:e,direction:n});return t(this._element).trigger(i),i},r.prototype._setActiveIndicatorElement=function(e){if(this._indicatorsElement){t(this._indicatorsElement).find(_.ACTIVE).removeClass(p.ACTIVE);var n=this._indicatorsElement.children[this._getItemIndex(e)];n&&t(n).addClass(p.ACTIVE)}},r.prototype._slide=function(e,n){var i=this,o=t(this._element).find(_.ACTIVE_ITEM)[0],r=n||o&&this._getItemByDirection(e,o),s=Boolean(this._interval),l=void 0,c=void 0,u=void 0;if(e===d.NEXT?(l=p.LEFT,c=p.NEXT,u=d.LEFT):(l=p.RIGHT,c=p.PREV,u=d.RIGHT),r&&t(r).hasClass(p.ACTIVE))return void(this._isSliding=!1);var h=this._triggerSlideEvent(r,u);if(!h.isDefaultPrevented()&&o&&r){this._isSliding=!0,s&&this.pause(),this._setActiveIndicatorElement(r);var g=t.Event(f.SLID,{relatedTarget:r,direction:u});Util.supportsTransitionEnd()&&t(this._element).hasClass(p.SLIDE)?(t(r).addClass(c),Util.reflow(r),t(o).addClass(l),t(r).addClass(l),t(o).one(Util.TRANSITION_END,function(){t(r).removeClass(l+" "+c).addClass(p.ACTIVE),t(o).removeClass(p.ACTIVE+" "+c+" "+l),i._isSliding=!1,setTimeout(function(){return t(i._element).trigger(g)},0)}).emulateTransitionEnd(a)):(t(o).removeClass(p.ACTIVE),t(r).addClass(p.ACTIVE),this._isSliding=!1,t(this._element).trigger(g)),s&&this.cycle()}},r._jQueryInterface=function(e){return this.each(function(){var n=t(this).data(i),o=t.extend({},u,t(this).data());"object"===("undefined"==typeof e?"undefined":_typeof(e))&&t.extend(o,e);var s="string"==typeof e?e:o.slide;if(n||(n=new r(this,o),t(this).data(i,n)),"number"==typeof e)n.to(e);else if("string"==typeof s){if(void 0===n[s])throw new Error('No method named "'+s+'"');n[s]()}else o.interval&&(n.pause(),n.cycle())})},r._dataApiClickHandler=function(e){var n=Util.getSelectorFromElement(this);if(n){var o=t(n)[0];if(o&&t(o).hasClass(p.CAROUSEL)){var s=t.extend({},t(o).data(),t(this).data()),a=this.getAttribute("data-slide-to");a&&(s.interval=!1),r._jQueryInterface.call(t(o),s),a&&t(o).data(i).to(a),e.preventDefault()}}},_createClass(r,null,[{key:"VERSION",get:function(){return n}},{key:"Default",get:function(){return u}}]),r}();return t(document).on(f.CLICK_DATA_API,_.DATA_SLIDE,g._dataApiClickHandler),t(window).on(f.LOAD_DATA_API,function(){t(_.DATA_RIDE).each(function(){var e=t(this);g._jQueryInterface.call(e,e.data())})}),t.fn[e]=g._jQueryInterface,t.fn[e].Constructor=g,t.fn[e].noConflict=function(){return t.fn[e]=s,g._jQueryInterface},g}(jQuery),_typeof="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t},_createClass=function(){function t(t,e){for(var n=0;n<e.length;n++){var i=e[n];i.enumerable=i.enumerable||!1,i.configurable=!0,"value"in i&&(i.writable=!0),Object.defineProperty(t,i.key,i)}}return function(e,n,i){return n&&t(e.prototype,n),i&&t(e,i),e}}(),Collapse=function(t){var e="collapse",n="4.0.0-alpha.6",i="bs.collapse",o="."+i,r=".data-api",s=t.fn[e],a=600,l={toggle:!0,parent:""},c={toggle:"boolean",parent:"string"},u={SHOW:"show"+o,SHOWN:"shown"+o,HIDE:"hide"+o,HIDDEN:"hidden"+o,CLICK_DATA_API:"click"+o+r},h={SHOW:"show",COLLAPSE:"collapse",COLLAPSING:"collapsing",COLLAPSED:"collapsed"},d={WIDTH:"width",HEIGHT:"height"},f={ACTIVES:".card > .show, .card > .collapsing",DATA_TOGGLE:'[data-toggle="collapse"]'},p=function(){function o(e,n){_classCallCheck(this,o),this._isTransitioning=!1,this._element=e,this._config=this._getConfig(n),this._triggerArray=t.makeArray(t('[data-toggle="collapse"][href="#'+e.id+'"],'+('[data-toggle="collapse"][data-target="#'+e.id+'"]'))),this._parent=this._config.parent?this._getParent():null,this._config.parent||this._addAriaAndCollapsedClass(this._element,this._triggerArray),this._config.toggle&&this.toggle()}return o.prototype.toggle=function(){t(this._element).hasClass(h.SHOW)?this.hide():this.show()},o.prototype.show=function(){var e=this;if(this._isTransitioning)throw new Error("Collapse is transitioning");if(!t(this._element).hasClass(h.SHOW)){var n=void 0,r=void 0;if(this._parent&&(n=t.makeArray(t(this._parent).find(f.ACTIVES)),n.length||(n=null)),!(n&&(r=t(n).data(i),r&&r._isTransitioning))){var s=t.Event(u.SHOW);if(t(this._element).trigger(s),!s.isDefaultPrevented()){n&&(o._jQueryInterface.call(t(n),"hide"),r||t(n).data(i,null));var l=this._getDimension();t(this._element).removeClass(h.COLLAPSE).addClass(h.COLLAPSING),this._element.style[l]=0,this._element.setAttribute("aria-expanded",!0),this._triggerArray.length&&t(this._triggerArray).removeClass(h.COLLAPSED).attr("aria-expanded",!0),this.setTransitioning(!0);var c=function(){t(e._element).removeClass(h.COLLAPSING).addClass(h.COLLAPSE).addClass(h.SHOW),e._element.style[l]="",e.setTransitioning(!1),t(e._element).trigger(u.SHOWN)};if(!Util.supportsTransitionEnd())return void c();var d=l[0].toUpperCase()+l.slice(1),p="scroll"+d;t(this._element).one(Util.TRANSITION_END,c).emulateTransitionEnd(a),this._element.style[l]=this._element[p]+"px"}}}},o.prototype.hide=function(){var e=this;if(this._isTransitioning)throw new Error("Collapse is transitioning");if(t(this._element).hasClass(h.SHOW)){var n=t.Event(u.HIDE);if(t(this._element).trigger(n),!n.isDefaultPrevented()){var i=this._getDimension(),o=i===d.WIDTH?"offsetWidth":"offsetHeight";this._element.style[i]=this._element[o]+"px",Util.reflow(this._element),t(this._element).addClass(h.COLLAPSING).removeClass(h.COLLAPSE).removeClass(h.SHOW),this._element.setAttribute("aria-expanded",!1),this._triggerArray.length&&t(this._triggerArray).addClass(h.COLLAPSED).attr("aria-expanded",!1),this.setTransitioning(!0);var r=function(){e.setTransitioning(!1),t(e._element).removeClass(h.COLLAPSING).addClass(h.COLLAPSE).trigger(u.HIDDEN)};return this._element.style[i]="",Util.supportsTransitionEnd()?void t(this._element).one(Util.TRANSITION_END,r).emulateTransitionEnd(a):void r()}}},o.prototype.setTransitioning=function(t){this._isTransitioning=t},o.prototype.dispose=function(){t.removeData(this._element,i),this._config=null,this._parent=null,this._element=null,this._triggerArray=null,this._isTransitioning=null},o.prototype._getConfig=function(n){return n=t.extend({},l,n),n.toggle=Boolean(n.toggle),Util.typeCheckConfig(e,n,c),n},o.prototype._getDimension=function(){var e=t(this._element).hasClass(d.WIDTH);return e?d.WIDTH:d.HEIGHT},o.prototype._getParent=function(){var e=this,n=t(this._config.parent)[0],i='[data-toggle="collapse"][data-parent="'+this._config.parent+'"]';return t(n).find(i).each(function(t,n){e._addAriaAndCollapsedClass(o._getTargetFromElement(n),[n])}),n},o.prototype._addAriaAndCollapsedClass=function(e,n){if(e){var i=t(e).hasClass(h.SHOW);e.setAttribute("aria-expanded",i),n.length&&t(n).toggleClass(h.COLLAPSED,!i).attr("aria-expanded",i)}},o._getTargetFromElement=function(e){var n=Util.getSelectorFromElement(e);return n?t(n)[0]:null},o._jQueryInterface=function(e){return this.each(function(){var n=t(this),r=n.data(i),s=t.extend({},l,n.data(),"object"===("undefined"==typeof e?"undefined":_typeof(e))&&e);if(!r&&s.toggle&&/show|hide/.test(e)&&(s.toggle=!1),r||(r=new o(this,s),n.data(i,r)),"string"==typeof e){if(void 0===r[e])throw new Error('No method named "'+e+'"');r[e]()}})},_createClass(o,null,[{key:"VERSION",get:function(){return n}},{key:"Default",get:function(){return l}}]),o}();return t(document).on(u.CLICK_DATA_API,f.DATA_TOGGLE,function(e){e.preventDefault();var n=p._getTargetFromElement(this),o=t(n).data(i),r=o?"toggle":t(this).data();p._jQueryInterface.call(t(n),r)}),t.fn[e]=p._jQueryInterface,t.fn[e].Constructor=p,t.fn[e].noConflict=function(){return t.fn[e]=s,p._jQueryInterface},p}(jQuery),_createClass=function(){function t(t,e){for(var n=0;n<e.length;n++){var i=e[n];i.enumerable=i.enumerable||!1,i.configurable=!0,"value"in i&&(i.writable=!0),Object.defineProperty(t,i.key,i)}}return function(e,n,i){return n&&t(e.prototype,n),i&&t(e,i),e}}(),Dropdown=function(t){var e="dropdown",n="4.0.0-alpha.6",i="bs.dropdown",o="."+i,r=".data-api",s=t.fn[e],a=27,l=38,c=40,u=3,h={HIDE:"hide"+o,HIDDEN:"hidden"+o,SHOW:"show"+o,SHOWN:"shown"+o,CLICK:"click"+o,CLICK_DATA_API:"click"+o+r,FOCUSIN_DATA_API:"focusin"+o+r,KEYDOWN_DATA_API:"keydown"+o+r},d={BACKDROP:"dropdown-backdrop",DISABLED:"disabled",SHOW:"show"},f={BACKDROP:".dropdown-backdrop",DATA_TOGGLE:'[data-toggle="dropdown"]',FORM_CHILD:".dropdown form",ROLE_MENU:'[role="menu"]',ROLE_LISTBOX:'[role="listbox"]',NAVBAR_NAV:".navbar-nav",VISIBLE_ITEMS:'[role="menu"] li:not(.disabled) a, [role="listbox"] li:not(.disabled) a'},p=function(){function e(t){_classCallCheck(this,e),this._element=t,this._addEventListeners()}return e.prototype.toggle=function(){if(this.disabled||t(this).hasClass(d.DISABLED))return!1;var n=e._getParentFromElement(this),i=t(n).hasClass(d.SHOW);if(e._clearMenus(),i)return!1;if("ontouchstart"in document.documentElement&&!t(n).closest(f.NAVBAR_NAV).length){var o=document.createElement("div");o.className=d.BACKDROP,t(o).insertBefore(this),t(o).on("click",e._clearMenus)}var r={relatedTarget:this},s=t.Event(h.SHOW,r);return t(n).trigger(s),!s.isDefaultPrevented()&&(this.focus(),this.setAttribute("aria-expanded",!0),t(n).toggleClass(d.SHOW),t(n).trigger(t.Event(h.SHOWN,r)),!1)},e.prototype.dispose=function(){t.removeData(this._element,i),t(this._element).off(o),this._element=null},e.prototype._addEventListeners=function(){t(this._element).on(h.CLICK,this.toggle)},e._jQueryInterface=function(n){return this.each(function(){var o=t(this).data(i);if(o||(o=new e(this),t(this).data(i,o)),"string"==typeof n){if(void 0===o[n])throw new Error('No method named "'+n+'"');o[n].call(this)}})},e._clearMenus=function(n){if(!n||n.which!==u){var i=t(f.BACKDROP)[0];i&&i.parentNode.removeChild(i);for(var o=t.makeArray(t(f.DATA_TOGGLE)),r=0;r<o.length;r++){var s=e._getParentFromElement(o[r]),a={relatedTarget:o[r]};if(t(s).hasClass(d.SHOW)&&!(n&&("click"===n.type&&/input|textarea/i.test(n.target.tagName)||"focusin"===n.type)&&t.contains(s,n.target))){var l=t.Event(h.HIDE,a);t(s).trigger(l),l.isDefaultPrevented()||(o[r].setAttribute("aria-expanded","false"),t(s).removeClass(d.SHOW).trigger(t.Event(h.HIDDEN,a)))}}}},e._getParentFromElement=function(e){var n=void 0,i=Util.getSelectorFromElement(e);return i&&(n=t(i)[0]),n||e.parentNode},e._dataApiKeydownHandler=function(n){if(/(38|40|27|32)/.test(n.which)&&!/input|textarea/i.test(n.target.tagName)&&(n.preventDefault(),n.stopPropagation(),!this.disabled&&!t(this).hasClass(d.DISABLED))){var i=e._getParentFromElement(this),o=t(i).hasClass(d.SHOW);if(!o&&n.which!==a||o&&n.which===a){if(n.which===a){var r=t(i).find(f.DATA_TOGGLE)[0];t(r).trigger("focus")}return void t(this).trigger("click")}var s=t(i).find(f.VISIBLE_ITEMS).get();if(s.length){var u=s.indexOf(n.target);n.which===l&&u>0&&u--,n.which===c&&u<s.length-1&&u++,u<0&&(u=0),s[u].focus()}}},_createClass(e,null,[{key:"VERSION",get:function(){return n}}]),e}();return t(document).on(h.KEYDOWN_DATA_API,f.DATA_TOGGLE,p._dataApiKeydownHandler).on(h.KEYDOWN_DATA_API,f.ROLE_MENU,p._dataApiKeydownHandler).on(h.KEYDOWN_DATA_API,f.ROLE_LISTBOX,p._dataApiKeydownHandler).on(h.CLICK_DATA_API+" "+h.FOCUSIN_DATA_API,p._clearMenus).on(h.CLICK_DATA_API,f.DATA_TOGGLE,p.prototype.toggle).on(h.CLICK_DATA_API,f.FORM_CHILD,function(t){t.stopPropagation()}),t.fn[e]=p._jQueryInterface,t.fn[e].Constructor=p,t.fn[e].noConflict=function(){return t.fn[e]=s,p._jQueryInterface},p}(jQuery),_typeof="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t},_createClass=function(){function t(t,e){for(var n=0;n<e.length;n++){var i=e[n];i.enumerable=i.enumerable||!1,i.configurable=!0,"value"in i&&(i.writable=!0),Object.defineProperty(t,i.key,i)}}return function(e,n,i){return n&&t(e.prototype,n),i&&t(e,i),e}}(),Modal=function(t){var e="modal",n="4.0.0-alpha.6",i="bs.modal",o="."+i,r=".data-api",s=t.fn[e],a=300,l=150,c=27,u={backdrop:!0,keyboard:!0,focus:!0,show:!0},h={backdrop:"(boolean|string)",keyboard:"boolean",focus:"boolean",show:"boolean"},d={HIDE:"hide"+o,HIDDEN:"hidden"+o,SHOW:"show"+o,SHOWN:"shown"+o,FOCUSIN:"focusin"+o,RESIZE:"resize"+o,CLICK_DISMISS:"click.dismiss"+o,KEYDOWN_DISMISS:"keydown.dismiss"+o,MOUSEUP_DISMISS:"mouseup.dismiss"+o,MOUSEDOWN_DISMISS:"mousedown.dismiss"+o,CLICK_DATA_API:"click"+o+r},f={SCROLLBAR_MEASURER:"modal-scrollbar-measure",BACKDROP:"modal-backdrop",OPEN:"modal-open",FADE:"fade",SHOW:"show"},p={DIALOG:".modal-dialog",DATA_TOGGLE:'[data-toggle="modal"]',DATA_DISMISS:'[data-dismiss="modal"]',FIXED_CONTENT:".fixed-top, .fixed-bottom, .is-fixed, .sticky-top"},_=function(){function r(e,n){_classCallCheck(this,r),this._config=this._getConfig(n),this._element=e,this._dialog=t(e).find(p.DIALOG)[0],this._backdrop=null,this._isShown=!1,this._isBodyOverflowing=!1,this._ignoreBackdropClick=!1,this._isTransitioning=!1,this._originalBodyPadding=0,this._scrollbarWidth=0}return r.prototype.toggle=function(t){return this._isShown?this.hide():this.show(t)},r.prototype.show=function(e){var n=this;if(this._isTransitioning)throw new Error("Modal is transitioning");Util.supportsTransitionEnd()&&t(this._element).hasClass(f.FADE)&&(this._isTransitioning=!0);var i=t.Event(d.SHOW,{relatedTarget:e});t(this._element).trigger(i),this._isShown||i.isDefaultPrevented()||(this._isShown=!0,this._checkScrollbar(),this._setScrollbar(),t(document.body).addClass(f.OPEN),this._setEscapeEvent(),this._setResizeEvent(),t(this._element).on(d.CLICK_DISMISS,p.DATA_DISMISS,function(t){return n.hide(t)}),t(this._dialog).on(d.MOUSEDOWN_DISMISS,function(){t(n._element).one(d.MOUSEUP_DISMISS,function(e){t(e.target).is(n._element)&&(n._ignoreBackdropClick=!0)})}),this._showBackdrop(function(){return n._showElement(e)}))},r.prototype.hide=function(e){var n=this;if(e&&e.preventDefault(),this._isTransitioning)throw new Error("Modal is transitioning");var i=Util.supportsTransitionEnd()&&t(this._element).hasClass(f.FADE);i&&(this._isTransitioning=!0);var o=t.Event(d.HIDE);t(this._element).trigger(o),this._isShown&&!o.isDefaultPrevented()&&(this._isShown=!1,this._setEscapeEvent(),this._setResizeEvent(),t(document).off(d.FOCUSIN),t(this._element).removeClass(f.SHOW),t(this._element).off(d.CLICK_DISMISS),t(this._dialog).off(d.MOUSEDOWN_DISMISS),i?t(this._element).one(Util.TRANSITION_END,function(t){return n._hideModal(t)}).emulateTransitionEnd(a):this._hideModal())},r.prototype.dispose=function(){t.removeData(this._element,i),t(window,document,this._element,this._backdrop).off(o),this._config=null,this._element=null,this._dialog=null,this._backdrop=null,this._isShown=null,this._isBodyOverflowing=null,this._ignoreBackdropClick=null,this._originalBodyPadding=null,this._scrollbarWidth=null},r.prototype._getConfig=function(n){return n=t.extend({},u,n),Util.typeCheckConfig(e,n,h),n},r.prototype._showElement=function(e){var n=this,i=Util.supportsTransitionEnd()&&t(this._element).hasClass(f.FADE);this._element.parentNode&&this._element.parentNode.nodeType===Node.ELEMENT_NODE||document.body.appendChild(this._element),this._element.style.display="block",this._element.removeAttribute("aria-hidden"),this._element.scrollTop=0,i&&Util.reflow(this._element),t(this._element).addClass(f.SHOW),this._config.focus&&this._enforceFocus();var o=t.Event(d.SHOWN,{relatedTarget:e}),r=function(){n._config.focus&&n._element.focus(),n._isTransitioning=!1,t(n._element).trigger(o)};i?t(this._dialog).one(Util.TRANSITION_END,r).emulateTransitionEnd(a):r()},r.prototype._enforceFocus=function(){var e=this;t(document).off(d.FOCUSIN).on(d.FOCUSIN,function(n){document===n.target||e._element===n.target||t(e._element).has(n.target).length||e._element.focus()})},r.prototype._setEscapeEvent=function(){var e=this;this._isShown&&this._config.keyboard?t(this._element).on(d.KEYDOWN_DISMISS,function(t){t.which===c&&e.hide()}):this._isShown||t(this._element).off(d.KEYDOWN_DISMISS)},r.prototype._setResizeEvent=function(){var e=this;this._isShown?t(window).on(d.RESIZE,function(t){return e._handleUpdate(t)}):t(window).off(d.RESIZE)},r.prototype._hideModal=function(){var e=this;this._element.style.display="none",this._element.setAttribute("aria-hidden","true"),this._isTransitioning=!1,this._showBackdrop(function(){t(document.body).removeClass(f.OPEN),e._resetAdjustments(),e._resetScrollbar(),t(e._element).trigger(d.HIDDEN)})},r.prototype._removeBackdrop=function(){this._backdrop&&(t(this._backdrop).remove(),this._backdrop=null)},r.prototype._showBackdrop=function(e){var n=this,i=t(this._element).hasClass(f.FADE)?f.FADE:"";if(this._isShown&&this._config.backdrop){var o=Util.supportsTransitionEnd()&&i;if(this._backdrop=document.createElement("div"),this._backdrop.className=f.BACKDROP,i&&t(this._backdrop).addClass(i),t(this._backdrop).appendTo(document.body),t(this._element).on(d.CLICK_DISMISS,function(t){return n._ignoreBackdropClick?void(n._ignoreBackdropClick=!1):void(t.target===t.currentTarget&&("static"===n._config.backdrop?n._element.focus():n.hide()))}),o&&Util.reflow(this._backdrop),t(this._backdrop).addClass(f.SHOW),!e)return;if(!o)return void e();t(this._backdrop).one(Util.TRANSITION_END,e).emulateTransitionEnd(l)}else if(!this._isShown&&this._backdrop){t(this._backdrop).removeClass(f.SHOW);var r=function(){n._removeBackdrop(),e&&e()};Util.supportsTransitionEnd()&&t(this._element).hasClass(f.FADE)?t(this._backdrop).one(Util.TRANSITION_END,r).emulateTransitionEnd(l):r()}else e&&e()},r.prototype._handleUpdate=function(){this._adjustDialog()},r.prototype._adjustDialog=function(){var t=this._element.scrollHeight>document.documentElement.clientHeight;!this._isBodyOverflowing&&t&&(this._element.style.paddingLeft=this._scrollbarWidth+"px"),this._isBodyOverflowing&&!t&&(this._element.style.paddingRight=this._scrollbarWidth+"px")},r.prototype._resetAdjustments=function(){this._element.style.paddingLeft="",this._element.style.paddingRight=""},r.prototype._checkScrollbar=function(){this._isBodyOverflowing=document.body.clientWidth<window.innerWidth,this._scrollbarWidth=this._getScrollbarWidth()},r.prototype._setScrollbar=function(){var e=parseInt(t(p.FIXED_CONTENT).css("padding-right")||0,10);this._originalBodyPadding=document.body.style.paddingRight||"",this._isBodyOverflowing&&(document.body.style.paddingRight=e+this._scrollbarWidth+"px")},r.prototype._resetScrollbar=function(){document.body.style.paddingRight=this._originalBodyPadding},r.prototype._getScrollbarWidth=function(){var t=document.createElement("div");t.className=f.SCROLLBAR_MEASURER,document.body.appendChild(t);var e=t.offsetWidth-t.clientWidth;return document.body.removeChild(t),e},r._jQueryInterface=function(e,n){return this.each(function(){var o=t(this).data(i),s=t.extend({},r.Default,t(this).data(),"object"===("undefined"==typeof e?"undefined":_typeof(e))&&e);if(o||(o=new r(this,s),t(this).data(i,o)),"string"==typeof e){if(void 0===o[e])throw new Error('No method named "'+e+'"');o[e](n)}else s.show&&o.show(n)})},_createClass(r,null,[{key:"VERSION",get:function(){return n}},{key:"Default",get:function(){return u}}]),r}();return t(document).on(d.CLICK_DATA_API,p.DATA_TOGGLE,function(e){var n=this,o=void 0,r=Util.getSelectorFromElement(this);r&&(o=t(r)[0]);var s=t(o).data(i)?"toggle":t.extend({},t(o).data(),t(this).data());"A"!==this.tagName&&"AREA"!==this.tagName||e.preventDefault();var a=t(o).one(d.SHOW,function(e){e.isDefaultPrevented()||a.one(d.HIDDEN,function(){t(n).is(":visible")&&n.focus()})});_._jQueryInterface.call(t(o),s,this)}),t.fn[e]=_._jQueryInterface,t.fn[e].Constructor=_,t.fn[e].noConflict=function(){return t.fn[e]=s,_._jQueryInterface},_}(jQuery),_typeof="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t},_createClass=function(){function t(t,e){for(var n=0;n<e.length;n++){var i=e[n];i.enumerable=i.enumerable||!1,i.configurable=!0,"value"in i&&(i.writable=!0),Object.defineProperty(t,i.key,i)}}return function(e,n,i){return n&&t(e.prototype,n),i&&t(e,i),e}}(),ScrollSpy=function(t){var e="scrollspy",n="4.0.0-alpha.6",i="bs.scrollspy",o="."+i,r=".data-api",s=t.fn[e],a={offset:10,method:"auto",target:""},l={offset:"number",method:"string",target:"(string|element)"},c={ACTIVATE:"activate"+o,SCROLL:"scroll"+o,LOAD_DATA_API:"load"+o+r},u={DROPDOWN_ITEM:"dropdown-item",DROPDOWN_MENU:"dropdown-menu",NAV_LINK:"nav-link",NAV:"nav",ACTIVE:"active"},h={DATA_SPY:'[data-spy="scroll"]',ACTIVE:".active",LIST_ITEM:".list-item",LI:"li",LI_DROPDOWN:"li.dropdown",NAV_LINKS:".nav-link",DROPDOWN:".dropdown",DROPDOWN_ITEMS:".dropdown-item",DROPDOWN_TOGGLE:".dropdown-toggle"},d={OFFSET:"offset",POSITION:"position"},f=function(){function r(e,n){var i=this;_classCallCheck(this,r),this._element=e,this._scrollElement="BODY"===e.tagName?window:e,this._config=this._getConfig(n),this._selector=this._config.target+" "+h.NAV_LINKS+","+(this._config.target+" "+h.DROPDOWN_ITEMS),this._offsets=[],this._targets=[],this._activeTarget=null,this._scrollHeight=0,t(this._scrollElement).on(c.SCROLL,function(t){return i._process(t)}),this.refresh(),this._process()}return r.prototype.refresh=function(){var e=this,n=this._scrollElement!==this._scrollElement.window?d.POSITION:d.OFFSET,i="auto"===this._config.method?n:this._config.method,o=i===d.POSITION?this._getScrollTop():0;this._offsets=[],this._targets=[],this._scrollHeight=this._getScrollHeight();var r=t.makeArray(t(this._selector));r.map(function(e){var n=void 0,r=Util.getSelectorFromElement(e);return r&&(n=t(r)[0]),n&&(n.offsetWidth||n.offsetHeight)?[t(n)[i]().top+o,r]:null}).filter(function(t){return t}).sort(function(t,e){return t[0]-e[0]}).forEach(function(t){e._offsets.push(t[0]),e._targets.push(t[1])})},r.prototype.dispose=function(){t.removeData(this._element,i),t(this._scrollElement).off(o),this._element=null,this._scrollElement=null,this._config=null,this._selector=null,this._offsets=null,this._targets=null,this._activeTarget=null,this._scrollHeight=null},r.prototype._getConfig=function(n){if(n=t.extend({},a,n),"string"!=typeof n.target){var i=t(n.target).attr("id");i||(i=Util.getUID(e),t(n.target).attr("id",i)),n.target="#"+i}return Util.typeCheckConfig(e,n,l),n},r.prototype._getScrollTop=function(){return this._scrollElement===window?this._scrollElement.pageYOffset:this._scrollElement.scrollTop},r.prototype._getScrollHeight=function(){return this._scrollElement.scrollHeight||Math.max(document.body.scrollHeight,document.documentElement.scrollHeight)},r.prototype._getOffsetHeight=function(){return this._scrollElement===window?window.innerHeight:this._scrollElement.offsetHeight},r.prototype._process=function(){var t=this._getScrollTop()+this._config.offset,e=this._getScrollHeight(),n=this._config.offset+e-this._getOffsetHeight();if(this._scrollHeight!==e&&this.refresh(),t>=n){var i=this._targets[this._targets.length-1];return void(this._activeTarget!==i&&this._activate(i))}if(this._activeTarget&&t<this._offsets[0]&&this._offsets[0]>0)return this._activeTarget=null,void this._clear();for(var o=this._offsets.length;o--;){var r=this._activeTarget!==this._targets[o]&&t>=this._offsets[o]&&(void 0===this._offsets[o+1]||t<this._offsets[o+1]);r&&this._activate(this._targets[o])}},r.prototype._activate=function(e){this._activeTarget=e,this._clear();var n=this._selector.split(",");n=n.map(function(t){return t+'[data-target="'+e+'"],'+(t+'[href="'+e+'"]')});var i=t(n.join(","));i.hasClass(u.DROPDOWN_ITEM)?(i.closest(h.DROPDOWN).find(h.DROPDOWN_TOGGLE).addClass(u.ACTIVE),i.addClass(u.ACTIVE)):i.parents(h.LI).find("> "+h.NAV_LINKS).addClass(u.ACTIVE),t(this._scrollElement).trigger(c.ACTIVATE,{relatedTarget:e})},r.prototype._clear=function(){t(this._selector).filter(h.ACTIVE).removeClass(u.ACTIVE)},r._jQueryInterface=function(e){return this.each(function(){var n=t(this).data(i),o="object"===("undefined"==typeof e?"undefined":_typeof(e))&&e;if(n||(n=new r(this,o),t(this).data(i,n)),"string"==typeof e){if(void 0===n[e])throw new Error('No method named "'+e+'"');n[e]()}})},_createClass(r,null,[{key:"VERSION",get:function(){return n}},{key:"Default",get:function(){return a}}]),r}();return t(window).on(c.LOAD_DATA_API,function(){for(var e=t.makeArray(t(h.DATA_SPY)),n=e.length;n--;){var i=t(e[n]);f._jQueryInterface.call(i,i.data())}}),t.fn[e]=f._jQueryInterface,t.fn[e].Constructor=f,t.fn[e].noConflict=function(){return t.fn[e]=s,f._jQueryInterface},f}(jQuery),_createClass=function(){function t(t,e){for(var n=0;n<e.length;n++){var i=e[n];i.enumerable=i.enumerable||!1,i.configurable=!0,"value"in i&&(i.writable=!0),Object.defineProperty(t,i.key,i)}}return function(e,n,i){return n&&t(e.prototype,n),i&&t(e,i),e}}(),Tab=function(t){var e="tab",n="4.0.0-alpha.6",i="bs.tab",o="."+i,r=".data-api",s=t.fn[e],a=150,l={HIDE:"hide"+o,HIDDEN:"hidden"+o,
SHOW:"show"+o,SHOWN:"shown"+o,CLICK_DATA_API:"click"+o+r},c={DROPDOWN_MENU:"dropdown-menu",ACTIVE:"active",DISABLED:"disabled",FADE:"fade",SHOW:"show"},u={A:"a",LI:"li",DROPDOWN:".dropdown",LIST:"ul:not(.dropdown-menu), ol:not(.dropdown-menu), nav:not(.dropdown-menu)",FADE_CHILD:"> .nav-item .fade, > .fade",ACTIVE:".active",ACTIVE_CHILD:"> .nav-item > .active, > .active",DATA_TOGGLE:'[data-toggle="tab"], [data-toggle="pill"]',DROPDOWN_TOGGLE:".dropdown-toggle",DROPDOWN_ACTIVE_CHILD:"> .dropdown-menu .active"},h=function(){function e(t){_classCallCheck(this,e),this._element=t}return e.prototype.show=function(){var e=this;if(!(this._element.parentNode&&this._element.parentNode.nodeType===Node.ELEMENT_NODE&&t(this._element).hasClass(c.ACTIVE)||t(this._element).hasClass(c.DISABLED))){var n=void 0,i=void 0,o=t(this._element).closest(u.LIST)[0],r=Util.getSelectorFromElement(this._element);o&&(i=t.makeArray(t(o).find(u.ACTIVE)),i=i[i.length-1]);var s=t.Event(l.HIDE,{relatedTarget:this._element}),a=t.Event(l.SHOW,{relatedTarget:i});if(i&&t(i).trigger(s),t(this._element).trigger(a),!a.isDefaultPrevented()&&!s.isDefaultPrevented()){r&&(n=t(r)[0]),this._activate(this._element,o);var h=function(){var n=t.Event(l.HIDDEN,{relatedTarget:e._element}),o=t.Event(l.SHOWN,{relatedTarget:i});t(i).trigger(n),t(e._element).trigger(o)};n?this._activate(n,n.parentNode,h):h()}}},e.prototype.dispose=function(){t.removeClass(this._element,i),this._element=null},e.prototype._activate=function(e,n,i){var o=this,r=t(n).find(u.ACTIVE_CHILD)[0],s=i&&Util.supportsTransitionEnd()&&(r&&t(r).hasClass(c.FADE)||Boolean(t(n).find(u.FADE_CHILD)[0])),l=function(){return o._transitionComplete(e,r,s,i)};r&&s?t(r).one(Util.TRANSITION_END,l).emulateTransitionEnd(a):l(),r&&t(r).removeClass(c.SHOW)},e.prototype._transitionComplete=function(e,n,i,o){if(n){t(n).removeClass(c.ACTIVE);var r=t(n.parentNode).find(u.DROPDOWN_ACTIVE_CHILD)[0];r&&t(r).removeClass(c.ACTIVE),n.setAttribute("aria-expanded",!1)}if(t(e).addClass(c.ACTIVE),e.setAttribute("aria-expanded",!0),i?(Util.reflow(e),t(e).addClass(c.SHOW)):t(e).removeClass(c.FADE),e.parentNode&&t(e.parentNode).hasClass(c.DROPDOWN_MENU)){var s=t(e).closest(u.DROPDOWN)[0];s&&t(s).find(u.DROPDOWN_TOGGLE).addClass(c.ACTIVE),e.setAttribute("aria-expanded",!0)}o&&o()},e._jQueryInterface=function(n){return this.each(function(){var o=t(this),r=o.data(i);if(r||(r=new e(this),o.data(i,r)),"string"==typeof n){if(void 0===r[n])throw new Error('No method named "'+n+'"');r[n]()}})},_createClass(e,null,[{key:"VERSION",get:function(){return n}}]),e}();return t(document).on(l.CLICK_DATA_API,u.DATA_TOGGLE,function(e){e.preventDefault(),h._jQueryInterface.call(t(this),"show")}),t.fn[e]=h._jQueryInterface,t.fn[e].Constructor=h,t.fn[e].noConflict=function(){return t.fn[e]=s,h._jQueryInterface},h}(jQuery),_typeof="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t},_createClass=function(){function t(t,e){for(var n=0;n<e.length;n++){var i=e[n];i.enumerable=i.enumerable||!1,i.configurable=!0,"value"in i&&(i.writable=!0),Object.defineProperty(t,i.key,i)}}return function(e,n,i){return n&&t(e.prototype,n),i&&t(e,i),e}}(),Tooltip=function(t){if("undefined"==typeof Tether)throw new Error("Bootstrap tooltips require Tether (http://tether.io/)");var e="tooltip",n="4.0.0-alpha.6",i="bs.tooltip",o="."+i,r=t.fn[e],s=150,a="bs-tether",l={animation:!0,template:'<div class="tooltip" role="tooltip"><div class="tooltip-inner"></div></div>',trigger:"hover focus",title:"",delay:0,html:!1,selector:!1,placement:"top",offset:"0 0",constraints:[],container:!1},c={animation:"boolean",template:"string",title:"(string|element|function)",trigger:"string",delay:"(number|object)",html:"boolean",selector:"(string|boolean)",placement:"(string|function)",offset:"string",constraints:"array",container:"(string|element|boolean)"},u={TOP:"bottom center",RIGHT:"middle left",BOTTOM:"top center",LEFT:"middle right"},h={SHOW:"show",OUT:"out"},d={HIDE:"hide"+o,HIDDEN:"hidden"+o,SHOW:"show"+o,SHOWN:"shown"+o,INSERTED:"inserted"+o,CLICK:"click"+o,FOCUSIN:"focusin"+o,FOCUSOUT:"focusout"+o,MOUSEENTER:"mouseenter"+o,MOUSELEAVE:"mouseleave"+o},f={FADE:"fade",SHOW:"show"},p={TOOLTIP:".tooltip",TOOLTIP_INNER:".tooltip-inner"},_={element:!1,enabled:!1},g={HOVER:"hover",FOCUS:"focus",CLICK:"click",MANUAL:"manual"},m=function(){function r(t,e){_classCallCheck(this,r),this._isEnabled=!0,this._timeout=0,this._hoverState="",this._activeTrigger={},this._isTransitioning=!1,this._tether=null,this.element=t,this.config=this._getConfig(e),this.tip=null,this._setListeners()}return r.prototype.enable=function(){this._isEnabled=!0},r.prototype.disable=function(){this._isEnabled=!1},r.prototype.toggleEnabled=function(){this._isEnabled=!this._isEnabled},r.prototype.toggle=function(e){if(e){var n=this.constructor.DATA_KEY,i=t(e.currentTarget).data(n);i||(i=new this.constructor(e.currentTarget,this._getDelegateConfig()),t(e.currentTarget).data(n,i)),i._activeTrigger.click=!i._activeTrigger.click,i._isWithActiveTrigger()?i._enter(null,i):i._leave(null,i)}else{if(t(this.getTipElement()).hasClass(f.SHOW))return void this._leave(null,this);this._enter(null,this)}},r.prototype.dispose=function(){clearTimeout(this._timeout),this.cleanupTether(),t.removeData(this.element,this.constructor.DATA_KEY),t(this.element).off(this.constructor.EVENT_KEY),t(this.element).closest(".modal").off("hide.bs.modal"),this.tip&&t(this.tip).remove(),this._isEnabled=null,this._timeout=null,this._hoverState=null,this._activeTrigger=null,this._tether=null,this.element=null,this.config=null,this.tip=null},r.prototype.show=function(){var e=this;if("none"===t(this.element).css("display"))throw new Error("Please use show on visible elements");var n=t.Event(this.constructor.Event.SHOW);if(this.isWithContent()&&this._isEnabled){if(this._isTransitioning)throw new Error("Tooltip is transitioning");t(this.element).trigger(n);var i=t.contains(this.element.ownerDocument.documentElement,this.element);if(n.isDefaultPrevented()||!i)return;var o=this.getTipElement(),s=Util.getUID(this.constructor.NAME);o.setAttribute("id",s),this.element.setAttribute("aria-describedby",s),this.setContent(),this.config.animation&&t(o).addClass(f.FADE);var l="function"==typeof this.config.placement?this.config.placement.call(this,o,this.element):this.config.placement,c=this._getAttachment(l),u=this.config.container===!1?document.body:t(this.config.container);t(o).data(this.constructor.DATA_KEY,this).appendTo(u),t(this.element).trigger(this.constructor.Event.INSERTED),this._tether=new Tether({attachment:c,element:o,target:this.element,classes:_,classPrefix:a,offset:this.config.offset,constraints:this.config.constraints,addTargetClasses:!1}),Util.reflow(o),this._tether.position(),t(o).addClass(f.SHOW);var d=function(){var n=e._hoverState;e._hoverState=null,e._isTransitioning=!1,t(e.element).trigger(e.constructor.Event.SHOWN),n===h.OUT&&e._leave(null,e)};if(Util.supportsTransitionEnd()&&t(this.tip).hasClass(f.FADE))return this._isTransitioning=!0,void t(this.tip).one(Util.TRANSITION_END,d).emulateTransitionEnd(r._TRANSITION_DURATION);d()}},r.prototype.hide=function(e){var n=this,i=this.getTipElement(),o=t.Event(this.constructor.Event.HIDE);if(this._isTransitioning)throw new Error("Tooltip is transitioning");var r=function(){n._hoverState!==h.SHOW&&i.parentNode&&i.parentNode.removeChild(i),n.element.removeAttribute("aria-describedby"),t(n.element).trigger(n.constructor.Event.HIDDEN),n._isTransitioning=!1,n.cleanupTether(),e&&e()};t(this.element).trigger(o),o.isDefaultPrevented()||(t(i).removeClass(f.SHOW),this._activeTrigger[g.CLICK]=!1,this._activeTrigger[g.FOCUS]=!1,this._activeTrigger[g.HOVER]=!1,Util.supportsTransitionEnd()&&t(this.tip).hasClass(f.FADE)?(this._isTransitioning=!0,t(i).one(Util.TRANSITION_END,r).emulateTransitionEnd(s)):r(),this._hoverState="")},r.prototype.isWithContent=function(){return Boolean(this.getTitle())},r.prototype.getTipElement=function(){return this.tip=this.tip||t(this.config.template)[0]},r.prototype.setContent=function(){var e=t(this.getTipElement());this.setElementContent(e.find(p.TOOLTIP_INNER),this.getTitle()),e.removeClass(f.FADE+" "+f.SHOW),this.cleanupTether()},r.prototype.setElementContent=function(e,n){var i=this.config.html;"object"===("undefined"==typeof n?"undefined":_typeof(n))&&(n.nodeType||n.jquery)?i?t(n).parent().is(e)||e.empty().append(n):e.text(t(n).text()):e[i?"html":"text"](n)},r.prototype.getTitle=function(){var t=this.element.getAttribute("data-original-title");return t||(t="function"==typeof this.config.title?this.config.title.call(this.element):this.config.title),t},r.prototype.cleanupTether=function(){this._tether&&this._tether.destroy()},r.prototype._getAttachment=function(t){return u[t.toUpperCase()]},r.prototype._setListeners=function(){var e=this,n=this.config.trigger.split(" ");n.forEach(function(n){if("click"===n)t(e.element).on(e.constructor.Event.CLICK,e.config.selector,function(t){return e.toggle(t)});else if(n!==g.MANUAL){var i=n===g.HOVER?e.constructor.Event.MOUSEENTER:e.constructor.Event.FOCUSIN,o=n===g.HOVER?e.constructor.Event.MOUSELEAVE:e.constructor.Event.FOCUSOUT;t(e.element).on(i,e.config.selector,function(t){return e._enter(t)}).on(o,e.config.selector,function(t){return e._leave(t)})}t(e.element).closest(".modal").on("hide.bs.modal",function(){return e.hide()})}),this.config.selector?this.config=t.extend({},this.config,{trigger:"manual",selector:""}):this._fixTitle()},r.prototype._fixTitle=function(){var t=_typeof(this.element.getAttribute("data-original-title"));(this.element.getAttribute("title")||"string"!==t)&&(this.element.setAttribute("data-original-title",this.element.getAttribute("title")||""),this.element.setAttribute("title",""))},r.prototype._enter=function(e,n){var i=this.constructor.DATA_KEY;return n=n||t(e.currentTarget).data(i),n||(n=new this.constructor(e.currentTarget,this._getDelegateConfig()),t(e.currentTarget).data(i,n)),e&&(n._activeTrigger["focusin"===e.type?g.FOCUS:g.HOVER]=!0),t(n.getTipElement()).hasClass(f.SHOW)||n._hoverState===h.SHOW?void(n._hoverState=h.SHOW):(clearTimeout(n._timeout),n._hoverState=h.SHOW,n.config.delay&&n.config.delay.show?void(n._timeout=setTimeout(function(){n._hoverState===h.SHOW&&n.show()},n.config.delay.show)):void n.show())},r.prototype._leave=function(e,n){var i=this.constructor.DATA_KEY;if(n=n||t(e.currentTarget).data(i),n||(n=new this.constructor(e.currentTarget,this._getDelegateConfig()),t(e.currentTarget).data(i,n)),e&&(n._activeTrigger["focusout"===e.type?g.FOCUS:g.HOVER]=!1),!n._isWithActiveTrigger())return clearTimeout(n._timeout),n._hoverState=h.OUT,n.config.delay&&n.config.delay.hide?void(n._timeout=setTimeout(function(){n._hoverState===h.OUT&&n.hide()},n.config.delay.hide)):void n.hide()},r.prototype._isWithActiveTrigger=function(){for(var t in this._activeTrigger)if(this._activeTrigger[t])return!0;return!1},r.prototype._getConfig=function(n){return n=t.extend({},this.constructor.Default,t(this.element).data(),n),n.delay&&"number"==typeof n.delay&&(n.delay={show:n.delay,hide:n.delay}),Util.typeCheckConfig(e,n,this.constructor.DefaultType),n},r.prototype._getDelegateConfig=function(){var t={};if(this.config)for(var e in this.config)this.constructor.Default[e]!==this.config[e]&&(t[e]=this.config[e]);return t},r._jQueryInterface=function(e){return this.each(function(){var n=t(this).data(i),o="object"===("undefined"==typeof e?"undefined":_typeof(e))&&e;if((n||!/dispose|hide/.test(e))&&(n||(n=new r(this,o),t(this).data(i,n)),"string"==typeof e)){if(void 0===n[e])throw new Error('No method named "'+e+'"');n[e]()}})},_createClass(r,null,[{key:"VERSION",get:function(){return n}},{key:"Default",get:function(){return l}},{key:"NAME",get:function(){return e}},{key:"DATA_KEY",get:function(){return i}},{key:"Event",get:function(){return d}},{key:"EVENT_KEY",get:function(){return o}},{key:"DefaultType",get:function(){return c}}]),r}();return t.fn[e]=m._jQueryInterface,t.fn[e].Constructor=m,t.fn[e].noConflict=function(){return t.fn[e]=r,m._jQueryInterface},m}(jQuery),Util=function(t){function e(t){return{}.toString.call(t).match(/\s([a-zA-Z]+)/)[1].toLowerCase()}function n(t){return(t[0]||t).nodeType}function i(){return{bindType:a.end,delegateType:a.end,handle:function(e){if(t(e.target).is(this))return e.handleObj.handler.apply(this,arguments)}}}function o(){if(window.QUnit)return!1;var t=document.createElement("bootstrap");for(var e in c)if(void 0!==t.style[e])return{end:c[e]};return!1}function r(e){var n=this,i=!1;return t(this).one(u.TRANSITION_END,function(){i=!0}),setTimeout(function(){i||u.triggerTransitionEnd(n)},e),this}function s(){a=o(),t.fn.emulateTransitionEnd=r,u.supportsTransitionEnd()&&(t.event.special[u.TRANSITION_END]=i())}var a=!1,l=1e6,c={WebkitTransition:"webkitTransitionEnd",MozTransition:"transitionend",OTransition:"oTransitionEnd otransitionend",transition:"transitionend"},u={TRANSITION_END:"bsTransitionEnd",getUID:function(t){do t+=~~(Math.random()*l);while(document.getElementById(t));return t},getSelectorFromElement:function(t){var e=t.getAttribute("data-target");return e||(e=t.getAttribute("href")||"",e=/^#[a-z]/i.test(e)?e:null),e},reflow:function(t){return t.offsetHeight},triggerTransitionEnd:function(e){t(e).trigger(a.end)},supportsTransitionEnd:function(){return Boolean(a)},typeCheckConfig:function(t,i,o){for(var r in o)if(o.hasOwnProperty(r)){var s=o[r],a=i[r],l=a&&n(a)?"element":e(a);if(!new RegExp(s).test(l))throw new Error(t.toUpperCase()+": "+('Option "'+r+'" provided type "'+l+'" ')+('but expected type "'+s+'".'))}}};return s(),u}(jQuery);!function(t){"use strict";"function"==typeof define&&define.amd?define(["jquery"],t):t(window.jQuery||window.Zepto)}(function(t){"use strict";var e,n=[],i={},o=/^([a-z]:)?\/\//i,r=/\.\w+$/;i.init=function(s){return s=t.extend({ping:null,dimensions:"preserve",glue:"_",skipExtensions:["svg"]},s),this.each(function(){var a=t(this);if(a.is("img")&&!a.hasClass("dense-image")){a.addClass("dense-image dense-loading");var l,c=i.getImageAttribute.call(this),u=a.attr("src"),h=!1;if(!c){if(!u||1===e||t.inArray(u.split(".").pop().split(/[\?\#]/).shift(),s.skipExtensions)!==-1)return void a.removeClass("dense-image dense-loading");c=u.replace(r,function(t){return s.glue+e+"x"+t}),h=s.ping!==!1&&t.inArray(c,n)===-1&&(s.ping===!0||!o.test(c)||0===c.indexOf("//"+document.domain)||0===c.indexOf(document.location.protocol+"//"+document.domain))}l=function(){var t=function(){a.removeClass("dense-loading").addClass("dense-ready").trigger("denseRetinaReady.dense")};a.attr("src",c),"update"===s.dimensions?a.dense("updateDimensions").one("denseDimensionChanged",t):("remove"===s.dimensions&&a.removeAttr("width height"),t())},h?t.ajax({url:c,type:"HEAD"}).done(function(t,e,i){var o=i.getResponseHeader("Content-type");o&&0!==o.indexOf("image/")||(n.push(c),l())}):l()}}),this},i.updateDimensions=function(){return this.each(function(){var e,n=t(this),i=n.attr("src");i&&(e=new Image,e.src=i,t(e).on("load.dense",function(){n.attr({width:e.width,height:e.height}).trigger("denseDimensionChanged.dense")}))})},i.devicePixelRatio=function(){var e=1;return"undefined"!==t.type(window.devicePixelRatio)?e=window.devicePixelRatio:"undefined"!==t.type(window.matchMedia)&&t.each([1.3,2,3,4,5,6],function(t,n){var i=["(-webkit-min-device-pixel-ratio: "+n+")","(min-resolution: "+Math.floor(96*n)+"dpi)","(min-resolution: "+n+"dppx)"].join(",");return!!window.matchMedia(i).matches&&void(e=n)}),Math.ceil(e)},i.getImageAttribute=function(){for(var n,i=t(this).eq(0),o=!1,r=1;r<=e;r++)n=i.attr("data-"+r+"x"),n&&(o=n);return o},e=i.devicePixelRatio(),t.fn.dense=function(e,n){return"string"===t.type(e)&&"function"===t.type(i[e])||(n=e,e="init"),i[e].call(this,n)},t(function(){t("body.dense-retina img").dense()})}),jQuery.extend(jQuery.easing,{easeIn:function(t,e,n,i,o){return jQuery.easing.easeInQuad(t,e,n,i,o)},easeOut:function(t,e,n,i,o){return jQuery.easing.easeOutQuad(t,e,n,i,o)},easeInOut:function(t,e,n,i,o){return jQuery.easing.easeInOutQuad(t,e,n,i,o)},expoin:function(t,e,n,i,o){return jQuery.easing.easeInExpo(t,e,n,i,o)},expoout:function(t,e,n,i,o){return jQuery.easing.easeOutExpo(t,e,n,i,o)},expoinout:function(t,e,n,i,o){return jQuery.easing.easeInOutExpo(t,e,n,i,o)},bouncein:function(t,e,n,i,o){return jQuery.easing.easeInBounce(t,e,n,i,o)},bounceout:function(t,e,n,i,o){return jQuery.easing.easeOutBounce(t,e,n,i,o)},bounceinout:function(t,e,n,i,o){return jQuery.easing.easeInOutBounce(t,e,n,i,o)},elasin:function(t,e,n,i,o){return jQuery.easing.easeInElastic(t,e,n,i,o)},elasout:function(t,e,n,i,o){return jQuery.easing.easeOutElastic(t,e,n,i,o)},elasinout:function(t,e,n,i,o){return jQuery.easing.easeInOutElastic(t,e,n,i,o)},backin:function(t,e,n,i,o){return jQuery.easing.easeInBack(t,e,n,i,o)},backout:function(t,e,n,i,o){return jQuery.easing.easeOutBack(t,e,n,i,o)},backinout:function(t,e,n,i,o){return jQuery.easing.easeInOutBack(t,e,n,i,o)}}),jQuery.easing.jswing=jQuery.easing.swing,jQuery.extend(jQuery.easing,{def:"easeOutQuad",swing:function(t,e,n,i,o){return jQuery.easing[jQuery.easing.def](t,e,n,i,o)},easeInQuad:function(t,e,n,i,o){return i*(e/=o)*e+n},easeOutQuad:function(t,e,n,i,o){return-i*(e/=o)*(e-2)+n},easeInOutQuad:function(t,e,n,i,o){return(e/=o/2)<1?i/2*e*e+n:-i/2*(--e*(e-2)-1)+n},easeInCubic:function(t,e,n,i,o){return i*(e/=o)*e*e+n},easeOutCubic:function(t,e,n,i,o){return i*((e=e/o-1)*e*e+1)+n},easeInOutCubic:function(t,e,n,i,o){return(e/=o/2)<1?i/2*e*e*e+n:i/2*((e-=2)*e*e+2)+n},easeInQuart:function(t,e,n,i,o){return i*(e/=o)*e*e*e+n},easeOutQuart:function(t,e,n,i,o){return-i*((e=e/o-1)*e*e*e-1)+n},easeInOutQuart:function(t,e,n,i,o){return(e/=o/2)<1?i/2*e*e*e*e+n:-i/2*((e-=2)*e*e*e-2)+n},easeInQuint:function(t,e,n,i,o){return i*(e/=o)*e*e*e*e+n},easeOutQuint:function(t,e,n,i,o){return i*((e=e/o-1)*e*e*e*e+1)+n},easeInOutQuint:function(t,e,n,i,o){return(e/=o/2)<1?i/2*e*e*e*e*e+n:i/2*((e-=2)*e*e*e*e+2)+n},easeInSine:function(t,e,n,i,o){return-i*Math.cos(e/o*(Math.PI/2))+i+n},easeOutSine:function(t,e,n,i,o){return i*Math.sin(e/o*(Math.PI/2))+n},easeInOutSine:function(t,e,n,i,o){return-i/2*(Math.cos(Math.PI*e/o)-1)+n},easeInExpo:function(t,e,n,i,o){return 0==e?n:i*Math.pow(2,10*(e/o-1))+n},easeOutExpo:function(t,e,n,i,o){return e==o?n+i:i*(-Math.pow(2,-10*e/o)+1)+n},easeInOutExpo:function(t,e,n,i,o){return 0==e?n:e==o?n+i:(e/=o/2)<1?i/2*Math.pow(2,10*(e-1))+n:i/2*(-Math.pow(2,-10*--e)+2)+n},easeInCirc:function(t,e,n,i,o){return-i*(Math.sqrt(1-(e/=o)*e)-1)+n},easeOutCirc:function(t,e,n,i,o){return i*Math.sqrt(1-(e=e/o-1)*e)+n},easeInOutCirc:function(t,e,n,i,o){return(e/=o/2)<1?-i/2*(Math.sqrt(1-e*e)-1)+n:i/2*(Math.sqrt(1-(e-=2)*e)+1)+n},easeInElastic:function(t,e,n,i,o){var r=1.70158,s=0,a=i;if(0==e)return n;if(1==(e/=o))return n+i;if(s||(s=.3*o),a<Math.abs(i)){a=i;var r=s/4}else var r=s/(2*Math.PI)*Math.asin(i/a);return-(a*Math.pow(2,10*(e-=1))*Math.sin((e*o-r)*(2*Math.PI)/s))+n},easeOutElastic:function(t,e,n,i,o){var r=1.70158,s=0,a=i;if(0==e)return n;if(1==(e/=o))return n+i;if(s||(s=.3*o),a<Math.abs(i)){a=i;var r=s/4}else var r=s/(2*Math.PI)*Math.asin(i/a);return a*Math.pow(2,-10*e)*Math.sin((e*o-r)*(2*Math.PI)/s)+i+n},easeInOutElastic:function(t,e,n,i,o){var r=1.70158,s=0,a=i;if(0==e)return n;if(2==(e/=o/2))return n+i;if(s||(s=o*(.3*1.5)),a<Math.abs(i)){a=i;var r=s/4}else var r=s/(2*Math.PI)*Math.asin(i/a);return e<1?-.5*(a*Math.pow(2,10*(e-=1))*Math.sin((e*o-r)*(2*Math.PI)/s))+n:a*Math.pow(2,-10*(e-=1))*Math.sin((e*o-r)*(2*Math.PI)/s)*.5+i+n},easeInBack:function(t,e,n,i,o,r){return void 0==r&&(r=1.70158),i*(e/=o)*e*((r+1)*e-r)+n},easeOutBack:function(t,e,n,i,o,r){return void 0==r&&(r=1.70158),i*((e=e/o-1)*e*((r+1)*e+r)+1)+n},easeInOutBack:function(t,e,n,i,o,r){return void 0==r&&(r=1.70158),(e/=o/2)<1?i/2*(e*e*(((r*=1.525)+1)*e-r))+n:i/2*((e-=2)*e*(((r*=1.525)+1)*e+r)+2)+n},easeInBounce:function(t,e,n,i,o){return i-jQuery.easing.easeOutBounce(t,o-e,0,i,o)+n},easeOutBounce:function(t,e,n,i,o){return(e/=o)<1/2.75?i*(7.5625*e*e)+n:e<2/2.75?i*(7.5625*(e-=1.5/2.75)*e+.75)+n:e<2.5/2.75?i*(7.5625*(e-=2.25/2.75)*e+.9375)+n:i*(7.5625*(e-=2.625/2.75)*e+.984375)+n},easeInOutBounce:function(t,e,n,i,o){return e<o/2?.5*jQuery.easing.easeInBounce(t,2*e,0,i,o)+n:.5*jQuery.easing.easeOutBounce(t,2*e-o,0,i,o)+.5*i+n}}),function(t){var e="mmenu",n="fixedElements";t[e].addons[n]={setup:function(){if(this.opts.offCanvas){var i=this.opts[n];this.conf[n];s=t[e].glbl,i=this.opts[n]=t.extend(!0,{},t[e].defaults[n],i);var o=function(t){var e=this.conf.classNames[n].fixed;this.__refactorClass(t.find("."+e),e,"slideout").appendTo(s.$body)};o.call(this,s.$page),this.bind("setPage",o)}},add:function(){i=t[e]._c,o=t[e]._d,r=t[e]._e,i.add("fixed")},clickAnchor:function(t,e){}},t[e].configuration.classNames[n]={fixed:"Fixed"};var i,o,r,s}(jQuery),function(t){"use strict";"function"==typeof define&&define.amd?define(["jquery"],t):"undefined"!=typeof module&&module.exports?module.exports=t(require("jquery")):t(jQuery)}(function(t){var e=-1,n=-1,i=function(t){return parseFloat(t)||0},o=function(e){var n=1,o=t(e),r=null,s=[];return o.each(function(){var e=t(this),o=e.offset().top-i(e.css("margin-top")),a=s.length>0?s[s.length-1]:null;null===a?s.push(e):Math.floor(Math.abs(r-o))<=n?s[s.length-1]=a.add(e):s.push(e),r=o}),s},r=function(e){var n={byRow:!0,property:"height",target:null,remove:!1};return"object"==typeof e?t.extend(n,e):("boolean"==typeof e?n.byRow=e:"remove"===e&&(n.remove=!0),n)},s=t.fn.matchHeight=function(e){var n=r(e);if(n.remove){var i=this;return this.css(n.property,""),t.each(s._groups,function(t,e){e.elements=e.elements.not(i)}),this}return this.length<=1&&!n.target?this:(s._groups.push({elements:this,options:n}),s._apply(this,n),this)};s.version="master",s._groups=[],s._throttle=80,s._maintainScroll=!1,s._beforeUpdate=null,s._afterUpdate=null,s._rows=o,s._parse=i,s._parseOptions=r,s._apply=function(e,n){var a=r(n),l=t(e),c=[l],u=t(window).scrollTop(),h=t("html").outerHeight(!0),d=l.parents().filter(":hidden");return d.each(function(){var e=t(this);e.data("style-cache",e.attr("style"))}),d.css("display","block"),a.byRow&&!a.target&&(l.each(function(){var e=t(this),n=e.css("display");"inline-block"!==n&&"flex"!==n&&"inline-flex"!==n&&(n="block"),e.data("style-cache",e.attr("style")),e.css({display:n,"padding-top":"0","padding-bottom":"0","margin-top":"0","margin-bottom":"0","border-top-width":"0","border-bottom-width":"0",height:"100px",overflow:"hidden"})}),c=o(l),l.each(function(){var e=t(this);e.attr("style",e.data("style-cache")||"")})),t.each(c,function(e,n){var o=t(n),r=0;if(a.target)r=a.target.outerHeight(!1);else{if(a.byRow&&o.length<=1)return void o.css(a.property,"");o.each(function(){var e=t(this),n=e.attr("style"),i=e.css("display");"inline-block"!==i&&"flex"!==i&&"inline-flex"!==i&&(i="block");var o={display:i};o[a.property]="",e.css(o),e.outerHeight(!1)>r&&(r=e.outerHeight(!1)),n?e.attr("style",n):e.css("display","")})}o.each(function(){var e=t(this),n=0;a.target&&e.is(a.target)||("border-box"!==e.css("box-sizing")&&(n+=i(e.css("border-top-width"))+i(e.css("border-bottom-width")),n+=i(e.css("padding-top"))+i(e.css("padding-bottom"))),e.css(a.property,r-n+"px"))})}),d.each(function(){var e=t(this);e.attr("style",e.data("style-cache")||null)}),s._maintainScroll&&t(window).scrollTop(u/h*t("html").outerHeight(!0)),this},s._applyDataApi=function(){var e={};t("[data-match-height], [data-mh]").each(function(){var n=t(this),i=n.attr("data-mh")||n.attr("data-match-height");i in e?e[i]=e[i].add(n):e[i]=n}),t.each(e,function(){this.matchHeight(!0)})};var a=function(e){s._beforeUpdate&&s._beforeUpdate(e,s._groups),t.each(s._groups,function(){s._apply(this.elements,this.options)}),s._afterUpdate&&s._afterUpdate(e,s._groups)};s._update=function(i,o){if(o&&"resize"===o.type){var r=t(window).width();if(r===e)return;e=r}i?n===-1&&(n=setTimeout(function(){a(o),n=-1},s._throttle)):a(o)},t(s._applyDataApi);var l=t.fn.on?"on":"bind";t(window)[l]("load",function(t){s._update(!1,t)}),t(window)[l]("resize orientationchange",function(t){s._update(!0,t)})}),define(["jquery","jquery-mousewheel","./select2/core","./select2/defaults"],function(t,e,n,i){if(null==t.fn.select2){var o=["open","close","destroy"];t.fn.select2=function(e){if(e=e||{},"object"==typeof e)return this.each(function(){var i=t.extend(!0,{},e);new n(t(this),i)}),this;if("string"==typeof e){var i,r=Array.prototype.slice.call(arguments,1);return this.each(function(){var n=t(this).data("select2");null==n&&window.console&&console.error&&console.error("The select2('"+e+"') method was called on an element that is not using Select2."),i=n[e].apply(n,r)}),t.inArray(e,o)>-1?this:i}throw new Error("Invalid arguments for Select2: "+e)}}return null==t.fn.select2.defaults&&(t.fn.select2.defaults=i),n}),$(function(){$(document).ready(function(){$(".match-height").matchHeight({byRow:!0,property:"min-height",target:null,remove:!1}),$("select").select2(),$("img").dense({glue:"@"}),$(".main-header").addClass("mmenu-fixed"),$("#wpadminbar").length&&$("#wpadminbar").addClass("mmenu-fixed");var t=$("#mobile-navigation").mmenu({extensions:["pagedim-black","theme-dark"],offCanvas:{position:"right"},navbars:[{position:"top"}]},{classNames:{fixedElements:{fixed:"mmenu-fixed"}}}),e=$("#mmenu-triger"),n=t.data("mmenu");e.on("click",function(){e.hasClass("is-active")?n.close():n.open()}),n.bind("opened",function(){setTimeout(function(){e.addClass("is-active")},10)}),n.bind("closed",function(){setTimeout(function(){e.removeClass("is-active")},10)}),$(".modal").insertAfter($("body")),$(function(){window.location.hash&&scroll(0,0),setTimeout(function(){scroll(0,0)},1);var t=$(".main-header").height();$("#wpadminbar").length&&(t+=$("#wpadminbar").height()),$(".scroll").on("click",function(e){e.preventDefault(),$("html, body").animate({scrollTop:$($(this).attr("href")).offset().top-t+"px"},1e3,"swing")}),window.location.hash&&$("html, body").animate({scrollTop:$(window.location.hash).offset().top-t+"px"},1e3,"swing")}),$(window).scroll(function(){$(this).scrollTop()>=100?$(".return-to-top").addClass("return-to-top--visible"):$(".return-to-top").removeClass("return-to-top--visible")}),$("#return-to-top").click(function(){$("body,html").animate({scrollTop:0},500)}),$(".content").prepend('<span class="first-element-fix"></span>'),$("#mobile-navigation .navigation li a").addClass("mm-fullsubopen"),$("ul.navbar-nav li.dropdown").hover(function(){$(this).find(".dropdown-menu").stop(!0,!0).delay(50).fadeIn()},function(){$(this).find(".dropdown-menu").stop(!0,!0).delay(50).fadeOut()}),$("p").each(function(){var t=$(this);0===t.html().replace(/\s|&nbsp;/g,"").length&&t.remove()}),$(function(){var t=0;$(window).scroll(function(e){var n=$(this).scrollTop();n>t&&n>=150?$(".main-header").addClass("main-header--scrolled"):$(".main-header").removeClass("main-header--scrolled"),t=n})}),jQuery("img").filter(function(){return this.src.match(/.*\.svg$/)}).each(function(){var t=jQuery(this),e=t.attr("id"),n=t.attr("class"),i=t.attr("src");jQuery.get(i,function(i){var o=jQuery(i).find("svg");"undefined"!=typeof e&&(o=o.attr("id",e)),"undefined"!=typeof n&&(o=o.attr("class",n+" replaced-svg")),o=o.removeAttr("xmlns:a"),t.replaceWith(o)},"xml")})}),$(window).on("load resize",function(){$("#wpadminbar").length&&$(".modal").on("shown.bs.modal",function(t){var e=$(this).find(".modal-content").height(),n=$("#wpadminbar").height();e>=$(window).height()?$(".modal .vertical-alignment-helper").css("padding-top",n+15):$(".modal .vertical-alignment-helper").css("padding-top",15)})})});
//# sourceMappingURL=data:application/json;charset=utf8;base64,
